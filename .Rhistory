aggregate(steps~date, data=a, FUN=sum)
hist(countPerDay)
meanSteps<-apply(countPerDay$steps,mean)
meanSteps<-apply(countPerDay$steps,FUN=mean)
a$date<-as.Date(as.character(a$date), format = "%Y-%m-%d")
countPerDay<-aggregate(steps~date, data=a, FUN=sum)
head(countPerDay)
meanSteps<-apply(data=countPerDay$steps,FUN=mean)
?apply
lapply
?lapply
meanSteps<-sapply(countPerDay$steps,FUN=mean)
meanSteps
mean(countPerDay$steps)
median(countPerDay$steps)
qplot(steps,data=countPerDay,fill)
qplot(steps,data=countPerDay)
qplot(steps,data=countPerDay,title="Number of Steps per Day")
?qpolt
?qplot
qplot(steps,data=countPerDay,main="Number of Steps per Day")
qplot(steps,data=countPerDay,main="Histogram - Total Steps per Day")
qplot(steps,data=countPerDay,main="Histogram - Total Steps per Day", bin=20)
?qplot
qplot(steps,data=countPerDay,main="Histogram - Total Steps per Day", binwidth=20)
qplot(steps,data=countPerDay,main="Histogram - Total Steps per Day", binwidth=range/40)
qplot(steps,data=countPerDay,main="Histogram - Total Steps per Day", binwidth=range(countPerDay$steps/40)
)
qplot(steps,data=countPerDay,main="Histogram - Total Steps per Day", binwidth=range(countPerDay$steps)/40)
range(ountPerDay$steps)
range(countPerDay$steps)
qplot(steps,data=countPerDay,main="Histogram - Total Steps per Day", binwidth=2000)
head(a)
stepsPer5<-aggregate(steps~interval, data=a, FUN=mean)
stepsPer5
g<-ggplot(stepsPer5, aes(interval,steps))
g+geom_line()
qplot(interval,steps,data=stepsPer5,type="l")
?qplot
qplot(interval,steps,data=stepsPer5,geom=c("line"))
max(stepsPer5$interval)
stepsPer5[stepsPer5$interval == maxsteps,]
maxsteps<-max(stepsPer5$interval)
stepsPer5[stepsPer5$interval == maxsteps,]
stepsPer5[stepsPer5$steps == maxsteps,]
maxsteps<-max(stepsPer5$steps)
stepsPer5[stepsPer5$steps == maxsteps,]
a[!complete.cases(a),]
head(a)
sum(is.na(a$steps))
nrow(a)
for row in nrow(a){
if is.na(a[row,1]){
#interval of the missing value
interv<-a[row,3]
# steps corresponding to that interval from avg table
stepInterv<-stepsPer5[stepsPer5$interval == interv,2]
a[row,1]<-stepInterv
}
}
for rows in nrow(a){
if is.na(a[rows,1]){
#interval of the missing value
interv<-a[rows,3]
# steps corresponding to that interval from avg table
stepInterv<-stepsPer5[stepsPer5$interval == interv,2]
a[rows,1]<-stepInterv
}
}
for (rows in nrow(a)){
if is.na(a[rows,1]){
#interval of the missing value
interv<-a[rows,3]
# steps corresponding to that interval from avg table
stepInterv<-stepsPer5[stepsPer5$interval == interv,2]
a[rows,1]<-stepInterv
}
}
for (rows in nrow(a)){
if is.na(a[rows,1]){
#interval of the missing value
interv<-a[rows,3]
# steps corresponding to that interval from avg table
stepInterv<-stepsPer5[stepsPer5$interval == interv,2]
a[rows,1]<-stepInterv
}
}
for (rows in 1:nrow(a)){
if is.na(a[rows,1]){
#interval of the missing value
interv<-a[rows,3]
# steps corresponding to that interval from avg table
stepInterv<-stepsPer5[stepsPer5$interval == interv,2]
a[rows,1]<-stepInterv
}
}
for (rows in 1:nrow(a)){
if is.na(a[rows,1]){
#interval of the missing value
interv<-a[rows,3]
# steps corresponding to that interval from avg table
stepInterv<-stepsPer5[stepsPer5$interval == interv,2]
a[rows,1]<-stepInterv
}
}
nrow(a)
1:nrow(a)
for (rows in 1:nrow(a)){ rows}
for (rows in 1:nrow(a)){
if (is.na(a[rows,1])){
#interval of the missing value
interv<-a[rows,3]
# steps corresponding to that interval from avg table
stepInterv<-stepsPer5[stepsPer5$interval == interv,2]
a[rows,1]<-stepInterv
}
}
head(a)
head(stepsPer5)
filledata<-a
for (rows in 1:nrow(filledata)){
if (is.na(filledata[rows,1])){
#interval of the missing value
interv<-filledata[rows,3]
# steps corresponding to that interval from avg table
stepInterv<-stepsPer5[stepsPer5$interval == interv,2]
filledata[rows,1]<-stepInterv
}
}
head(filledata)
# steps per day
countPerDayf<-aggregate(steps~date, data=filledata, FUN=sum)
# histogram
qplot(steps,data=countPerDayf,main="Histogram - Total Steps per Day")
# mean and median number of steps taken
meanSteps<-mean(countPerDayf$steps)
meanSteps
# median
medianSteps<-median(countPerDayf$steps)
medianSteps
qplot(steps,data=countPerDay,main="Histogram - Total Steps per Day",binwidth=2000)
qplot(steps,data=countPerDayf,main="Histogram - Total Steps per Day",binwidth=2000)
fileUrl<-"http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(fileUrl,destfile="activity.zip")
datedownloaded<-date()
unzip("activity.zip")
a<-read.csv("activity.csv")
```
# download and unzip data
# fileUrl<-"http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
# download.file(fileUrl,destfile="activity.zip")
# datedownloaded<-date()
# unzip("activity.zip")wee
weekdays()
head(filledata)
weekdays(filledata$date)
filledata$Day<-weekdays(filledata$date)
head(filledata)
filledata$Day<-weekdays(filledata$date)
for (row in 1:nrow(filledata)){
if (filledata[row,4] in c("Saturday,Sunday")){
filledata[row,4]<-"Weekend"
}
else{filledata[row,4]<-"Weekday"}
}
}
filledata$Day<-weekdays(filledata$date)
for (row in 1:nrow(filledata)){
if (filledata[row,4] in c("Saturday,Sunday")){
filledata[row,4]<-"Weekend"
}
else{filledata[row,4]<-"Weekday"}
}
}
filledata$Day<-weekdays(filledata$date)
for (row in 1:nrow(filledata)){
if (filledata[row,4] in c("Saturday","Sunday")){
filledata[row,4]<-"Weekend"
}
else{filledata[row,4]<-"Weekday"}
}
}
filledata$Day<-weekdays(filledata$date)
for (row in 1:nrow(filledata)){
if (filledata[row,4] == "Saturday"| filledata[row,4] == "Sunday")){
filledata[row,4]<-"Weekend"
}
else{filledata[row,4]<-"Weekday"}
}
}
filledata$Day<-weekdays(filledata$date)
for (row in 1:nrow(filledata)){
if (filledata[row,4] == "Saturday"| filledata[row,4] == "Sunday"){
filledata[row,4]<-"Weekend"
}
else{filledata[row,4]<-"Weekday"}
}
}
filledata$Day<-weekdays(filledata$date)
for (row in 1:nrow(filledata)){
if (filledata[row,4] == "Saturday"| filledata[row,4] == "Sunday"){
filledata[row,4]<-"Weekend"
}
else{filledata[row,4]<-"Weekday"}
}
head(filledata)
summary(filledata)
as.factor(filldata$Day)
as.factor(filledata$Day)
weekends<-filledata[filledata$Day== "Weekend",]
weekdays<-filledata[filledata$Day== "Weekday",]
nrow(weekends)
nrow(weekdays)
head(weekend)
head(weekends)
?aggregate
weekdaysteps
weekdaysteps<-aggregate(steps~interval, data=filledata, FUN=mean)
weekendsteps<-aggregate(steps~interval, data=weekends, FUN=mean)
weekdaysteps
weekends<-filledata[filledata$Day== "Weekend",]
weekdays<-filledata[filledata$Day== "Weekday",]
weekdaysteps<-aggregate(steps~interval, data=filledata, FUN=mean)
weekendsteps<-aggregate(steps~interval, data=weekends, FUN=mean)
qplot(interval,steps,data=weekdaysteps,geom=c("line"))
qplot(interval,steps,data=weekendsteps,geom=c("line"))
par(mfrow=c(2,1))
qplot(interval,steps,data=weekdaysteps,geom=c("line"))
qplot(interval,steps,data=weekendsteps,geom=c("line"))
qplot(interval,steps,data=weekdaysteps,geom=c("line"))
qplot(interval,steps,data=weekendsteps,geom=c("line"))
plot1<-qplot(interval,steps,data=weekdaysteps,geom=c("line"))
plot2<-qplot(interval,steps,data=weekendsteps,geom=c("line"))
multiplot(plot1,plot2,cols=1)
?multiplot
library(ggplot2)
multiplot(plot1,plot2,cols=1)
multiplot(plot1, plot2, cols=2)
require(gridextra)
require(gridExtra)
install.packages("gridExtra")
library(gridExtra)
install.packages("grid")
install.packages("grid")
weekdaysteps<-aggregate(steps~interval,Day, data=filledata, FUN=mean)
weekdaysteps<-aggregate(steps~interval+Day, data=filledata, FUN=mean)
head(weekdaysteps)
intervalsteps<-aggregate(steps~interval,Day, data=filledata, FUN=mean)
qplot(interval,steps,data=intervalsteps,geom=c("line"), facets=.~Day)
intervalsteps<-aggregate(steps~interval+Day, data=filledata, FUN=mean)
qplot(interval,steps,data=intervalsteps,geom=c("line"), facets=.~Day)
intervalsteps<-aggregate(steps~interval+Day, data=filledata, FUN=mean)
qplot(interval,steps,data=intervalsteps,geom=c("line"), facets=~Day.)
intervalsteps<-aggregate(steps~interval+Day, data=filledata, FUN=mean)
qplot(interval,steps,data=intervalsteps,geom=c("line"), facets=Day.)
intervalsteps<-aggregate(steps~interval+Day, data=filledata, FUN=mean)
qplot(interval,steps,data=intervalsteps,geom=c("line"), facets=Day~.)
```
stepsPer5<-aggregate(steps~interval, data=a, FUN=mean)
qplot(interval,steps,data=stepsPer5,geom=c("line"))
getwd()
setwd(""/Users/nihan/Code/coursera/Reproducable Research/PeerAssess1"/untitled folder")
setwd("/Users/nihan/Code/coursera/Reproducable Research/PeerAssess1"/untitled folder")
setwd("/Users/nihan/Code/coursera/Reproducable Research/PeerAssess1/untitled folder")
knit2html("PA1_template.Rmd")
getwd()
setwd("/Users/nihan/Code/coursera/GetCleanData")
ls()
setwd("/Users/nihan/Code/coursera/GetCleanData")
ls()
list.files()
setwd("/Users/nihan/Code/coursera/GetCleanData/Project")
list.files()
unzip("getdata-projectfiles-UCI HAR Dataset.zip")
list.files()
setwd("/Users/nihan/Code/coursera/GetCleanData/Project/UCI HAR Dataset")
list.files()
setwd("/Users/nihan/Code/coursera/GetCleanData/Project")
unzip("getdata-projectfiles-UCI HAR Dataset.zip")
setwd("/Users/nihan/Code/coursera/GetCleanData/Project/UCI HAR Dataset/test")
list.files()
read.file("subject_test.txt")
read.table("subject_test.txt")
subject_test<-read.table("subject_test.txt")
class(subject_test)
summary(subject_test)
head(subject_test)
plot(subject_test)
plot(subject_test)
plot(subject_test)
histogram(subject_test)
hist(subject_test)
hist(subject_test[,1])
unique(subject_test[,1])
subject_test<-read.table("subject_test.txt")
X_test<-read.table("X_test.txt")
head(X_test)
head(y_test)
X_test<-read.table("X_test.txt")
y_test<-read.table("y_test.txt")
head(X_test)
nrow(X_test)
nrow(subject_test)
head(y_test)
unique(y_test[,1])
nrow(y_test)
setwd("/Users/nihan/Code/coursera/GetCleanData/Project")
X_test<-read.table("/UCI HAR Dataset/test/X_test.txt")
X_test<-read.table("./UCI HAR Dataset/test/X_test.txt")
heas(X_test)
head(X_test)
head(y_test)
summary(X_test)
subject_train<-read.table("./UCI HAR Dataset/train/subject_train.txt")
nrows(subject_train)
nrow(subject_train)
subject_train<-read.table("./UCI HAR Dataset/train/subject_train.txt", head=F)
nrow(subject_train)
y_test
head(y_test)
colname(y_test
)
colnames(y_test)
colnames(y_test)=c("Activity Code")
head(y)
head(y_test)
activity_labels
activity_labels<-read.table("./UCI HAR Dataset/activity_lables.txt")
getwd()
activity_labels<-read.table("./UCI HAR Dataset/activity_labels.txt")
activity_labels
activity_labels<-read.table("./UCI HAR Dataset/activity_labels.txt")
colnames(activity_labels)=c("Activity_Code","Activity")
colnames(y_test)=c("ActivityCode")
merge(activity_labels,y_test, by.x="ActivityCode", by.y="ActivityCode", all=TRUE)
activity_labels
merge("activity_labels","y_test", by.x="ActivityCode", by.y="ActivityCode", all=TRUE)
merge("activity_labels","y_test", by.x="Activity_Code", by.y="ActivityCode", all=TRUE)
merge(activity_labels,y_test, by.x="Activity_Code", by.y="ActivityCode", all=TRUE)
y_test2<-merge("activity_labels","y_test", by.x="ActivityCode", by.y="ActivityCode", all=TRUE)[,2]
ytest2<-merge(activity_labels,y_test, by.x="Activity_Code", by.y="ActivityCode", all=TRUE)[,2]
head(ytest2)
y_test<-merge(activity_labels,y_test, by.x="ActivityCode", by.y="ActivityCode", all=TRUE)[,2]
y_test<-merge(activity_labels,y_test, by.x="Activity_Code", by.y="ActivityCode", all=TRUE)[,2]
head(y_test)
y_test<-read.table("./UCI HAR Dataset/test/y_test.txt")
colnames(y_test)=c("ActivityCode")
y_test<-merge(activity_labels,y_test, by.x="Activity_Code", by.y="ActivityCode", all=TRUE)
head(y_test)
head(features)
features<-read.table("./UCI HAR Dataset/features.txt")
head(features)
colnames(X_test)=features[,2]
head(X_test)
features
testdata<-cbind(subject_test, X_test, y_test)
head(testdata)
testdata<-cbind(subject_test, y_test, X_test)
head(testdata)
testdata[1:5,1:5]
subject_train<-read.table("./UCI HAR Dataset/train/subject_train.txt")
colnames(subject_train)=c("SubjectNo")
# features for test group data 2947x561
X_train<-read.table("./UCI HAR Dataset/train/X_train.txt")
colnames(X_train)=features[,2]
# activity code for test group data
y_train<-read.table("./UCI HAR Dataset/train/y_train.txt")
colnames(y_test)=c("ActivityCode")
y_train<-merge(activity_labels,y_train, by.x="Activity_Code", by.y="ActivityCode", all=TRUE)
traindata<-cbind(subject_train, y_train, X_train)
mergeData<-rbind(testdata,traindata)
dim(testdata)
dim(traindata)
dim(X_train)
dim(y_train)
dim(subject_train)
dim(y_test)
y_test
y_train<-merge(activity_labels,y_train, by.x="Activity_Code", by.y="ActivityCode", all=TRUE)
y_test<-merge(activity_labels,y_test, by.x="Activity_Code", by.y="ActivityCode", all=TRUE)
y_train
head(y_train)
colnames(y_train)=c("ActivityCode")
y_train<-merge(activity_labels,y_train, by.x="Activity_Code", by.y="ActivityCode", all=TRUE)
traindata<-cbind(subject_train, y_train, X_train)
dim(traindata)
aa<-mergeData[ , grepl( "mean()" , names(mergeData ) ]
aa<-mergeData[,grepl("mean()",names(mergeData)]
grepl("mean()",names(mergeData)
)
head(mergeData)
mergeData<-rbind(testdata,traindata)
traindata<-cbind(subject_train, y_train, X_train)
mergeData<-rbind(testdata,traindata)
names(testdata)
colnames(subject_train)=c("SubjectNo")
traindata<-cbind(subject_train, y_train, X_train)
# merge train and test data
mergeData<-rbind(testdata,traindata)
names(testdata)
names(traindata)
colnames(subject_test)=c("SubjectNo")
testdata<-cbind(subject_test, y_test, X_test)
mergeData<-rbind(testdata,traindata)
dim(testdata)
dim(traindata)
colnames(testdata)
testdata<-cbind(subject_test, y_test, X_test)
dim(subject_test)
dim(y_test)
y_test
y_test<-read.table("./UCI HAR Dataset/test/y_test.txt")
colnames(y_test)=c("ActivityCode")
y_test<-merge(activity_labels,y_test, by.x="Activity_Code", by.y="ActivityCode", all=TRUE)
testdata<-cbind(subject_test, y_test, X_test)
mergeData<-rbind(testdata,traindata)
aa<-mergeData[,grepl("mean()",names(mergeData))]
head(aa)
features
aa<-mergeData[,grepl("mean()",names(mergeData))|grepl("std()",names(mergeData))]
head(aa)
colnames(aa)
head(aa)
X_testS<-X_test[,grepl("mean()",names(X_test))|grepl("std()",names(X_test))]
# activity code for test group data
y_test<-read.table("./UCI HAR Dataset/test/y_test.txt")
colnames(y_test)=c("ActivityCode")
y_test<-merge(activity_labels,y_test, by.x="Activity_Code", by.y="ActivityCode", all=TRUE)
testdata<-cbind(subject_test, y_test, X_testS)
X_trainS<-X_train[,grepl("mean()",names(X_train))|grepl("std()",names(X_train))]
# activity code for test group data
y_train<-read.table("./UCI HAR Dataset/train/y_train.txt")
colnames(y_train)=c("ActivityCode")
y_train<-merge(activity_labels,y_train, by.x="Activity_Code", by.y="ActivityCode", all=TRUE)
traindata<-cbind(subject_train, y_train, X_trainS)
# merge train and test data
mergeData<-rbind(testdata,traindata)
head(mergeData)
testdata<-cbind(y_test, subject_test, X_testS)
traindata<-cbind(y_train, subject_train, X_trainS)
# merge train and test data
mergeData<-rbind(testdata,traindata)
mergeData
head(mergeData)
cleanData<-mergeData[,2:ncol(mergeData)]
head(cleanData)
colsIncl<-mergeData[,grepl("mean()",names(mergeData))]
colsIncl
colsIncl<-grepl("mean()",names(mergeData))
colsIncl
colsIncl[2:3]<-TRUE
colsIncl
v
colsIncl[2:3]<-TRUE
cleandata<-mergeData[,colsIncl]
head(cleandata)
write.table(cleandata,"cleandata.txt",row.name=FALSE)
read.table("cleandata.txt")
bb<-read.table("cleandata.txt")
head(bb)
write.table(cleandata,"cleandata.txt",row.name=FALSE,head=TRUE)
write.table(cleandata,"cleandata.txt",row.name=FALSE,head=T)
cc<-read.table("cleandata.txt",head=T)
head(cc)
features
names(aa)
head(cleandata)
names(cleandata)
names(cleandata)
# create clean data
setwd("/Users/nihan/Code/coursera/GetCleanData/Project")
unzip("getdata-projectfiles-UCI HAR Dataset.zip")
setwd("/Users/nihan/Code/coursera/GetCleanData/Project")
# read acivity labels
activity_labels<-read.table("./UCI HAR Dataset/activity_labels.txt")
colnames(activity_labels)=c("Activity_Code","Activity")
# read features
features<-read.table("./UCI HAR Dataset/features.txt")
## Read test data :: 9 subjects
# subject identifier for test group
subject_test<-read.table("./UCI HAR Dataset/test/subject_test.txt")
colnames(subject_test)=c("SubjectNo")
# features for test group data 2947x561
X_test<-read.table("./UCI HAR Dataset/test/X_test.txt")
colnames(X_test)=features[,2]
X_testS<-X_test[,grepl("mean()",names(X_test))|grepl("std()",names(X_test))]
# activity code for test group data
y_test<-read.table("./UCI HAR Dataset/test/y_test.txt")
colnames(y_test)=c("ActivityCode")
y_test<-merge(activity_labels,y_test, by.x="Activity_Code", by.y="ActivityCode", all=TRUE)
testdata<-cbind(y_test, subject_test, X_testS)
## Read train data :: 21 subject
# subject identifier for test group
subject_train<-read.table("./UCI HAR Dataset/train/subject_train.txt")
colnames(subject_train)=c("SubjectNo")
# features for test group data 2947x561
X_train<-read.table("./UCI HAR Dataset/train/X_train.txt")
colnames(X_train)=features[,2]
X_trainS<-X_train[,grepl("mean()",names(X_train))|grepl("std()",names(X_train))]
# activity code for test group data
y_train<-read.table("./UCI HAR Dataset/train/y_train.txt")
colnames(y_train)=c("ActivityCode")
y_train<-merge(activity_labels,y_train, by.x="Activity_Code", by.y="ActivityCode", all=TRUE)
traindata<-cbind(y_train, subject_train, X_trainS)
# merge train and test data
mergeData<-rbind(testdata,traindata)
# create clean data
colsIncl<-grepl("mean()",names(mergeData))
colsIncl[2:3]<-TRUE
cleandata<-mergeData[,colsIncl]
write.table(cleandata,"cleandata.txt",row.name=FALSE,head=TRUE)
write.table(cleandata,"cleandata.txt",row.name=FALSE)
